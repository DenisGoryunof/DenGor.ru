// netlify/functions/telegram.js
exports.handler = async function(event, context) {
  // –†–∞–∑—Ä–µ—à–∞–µ–º CORS
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type',
    'Access-Control-Allow-Methods': 'POST, OPTIONS',
    'Content-Type': 'application/json'
  };

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º preflight –∑–∞–ø—Ä–æ—Å
  if (event.httpMethod === 'OPTIONS') {
    return {
      statusCode: 200,
      headers,
      body: ''
    };
  }

  // –¢–æ–ª—å–∫–æ POST –∑–∞–ø—Ä–æ—Å—ã
  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      headers,
      body: JSON.stringify({ error: 'Method Not Allowed' })
    };
  }

  try {
    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    const data = JSON.parse(event.body);
    console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', data);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!data.name || !data.email || !data.message) {
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({ error: '–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π' })
      };
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
    const CHAT_ID = process.env.TELEGRAM_CHAT_ID;

    if (!BOT_TOKEN || !CHAT_ID) {
      console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      return {
        statusCode: 500,
        headers,
        body: JSON.stringify({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ' })
      };
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const message = `
üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞!

üë§ –ò–º—è: ${data.name}
üìß Email: ${data.email}
${data.phone ? `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}` : ''}
üéØ –£—Å–ª—É–≥–∞: ${getServiceName(data.service)}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:
${data.message}

üìÖ ${new Date().toLocaleString('ru-RU')}
    `.trim();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    const telegramResponse = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: CHAT_ID,
        text: message,
        parse_mode: 'HTML'
      })
    });

    const result = await telegramResponse.json();

    if (!result.ok) {
      throw new Error(result.description || '–û—à–∏–±–∫–∞ Telegram API');
    }

    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({ 
        success: true, 
        message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!' 
      })
    };

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
    return {
      statusCode: 500,
      headers,
      body: JSON.stringify({ 
        error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ' + error.message 
      })
    };
  }
};

function getServiceName(service) {
  const services = {
    'landing': '–õ–µ–Ω–¥–∏–Ω–≥',
    'corporate': '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç', 
    'shop': '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω',
    'bot': '–ß–∞—Ç-–±–æ—Ç',
    'complex': '–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ'
  };
  return services[service] || service || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
}