// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Netlify (–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
const TELEGRAM_CONFIG = {
  botToken: window.atob('NTMxMTk0NzUzNTpBQUYxUE40TzJpVTFtTGZ5dUlvYUlNZVlzQ2l4N0FueFlLYw=='), // –æ—Å—Ç–∞–≤—å –∫–∞–∫ –µ—Å—Ç—å
  chatId: '130208292',      // ‚Üê —Å–≤–æ–π id
  botChatId: '130208292'    // ‚Üê –º–æ–∂–Ω–æ —Ç–æ—Ç –∂–µ, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ª–∏—á–∫—É
};

// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
async function sendToTelegram(formData) {
    try {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º
        const botMessage = formatBotMessage(formData);
        const botUrl = `https://api.telegram.org/bot${TELEGRAM_CONFIG.botToken}/sendMessage`;
        
        await fetch(botUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                chat_id: TELEGRAM_CONFIG.botChatId,
                text: botMessage,
                parse_mode: 'HTML'
            })
        });

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        const personalMessage = formatPersonalMessage(formData);
        await fetch(botUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                chat_id: TELEGRAM_CONFIG.chatId,
                text: personalMessage,
                parse_mode: 'HTML'
            })
        });

        return { success: true };
    } catch (error) {
        console.error('Telegram API error:', error);
        return { success: false, error: error.message };
    }
}

function formatBotMessage(data) {
    return `
üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞!</b>

üë§ <b>–ò–º—è:</b> ${escapeHtml(data.name)}
üìß <b>Email:</b> ${escapeHtml(data.email)}
${data.phone ? `üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${escapeHtml(data.phone)}` : ''}
üéØ <b>–£—Å–ª—É–≥–∞:</b> ${getServiceName(data.service)}
üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> ${escapeHtml(data.message)}

üìÖ <b>–î–∞—Ç–∞:</b> ${new Date().toLocaleString('ru-RU')}
üåê <b>IP:</b> ${getClientIP()}
    `.trim();
}

function formatPersonalMessage(data) {
    return `
<b>üîî –õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞</b>

<b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> ${escapeHtml(data.name)} (${escapeHtml(data.email)})
<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${data.phone || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
<b>–£—Å–ª—É–≥–∞:</b> ${getServiceName(data.service)}

<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
${escapeHtml(data.message)}

‚è∞ ${new Date().toLocaleString('ru-RU')}
    `.trim();
}

function escapeHtml(text) {
    const map = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#039;'
    };
    return text.replace(/[&<>"']/g, m => map[m]);
}

function getServiceName(service) {
    const services = {
        'landing': '–õ–µ–Ω–¥–∏–Ω–≥',
        'corporate': '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Å–∞–π—Ç',
        'shop': '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω',
        'bot': '–ß–∞—Ç-–±–æ—Ç',
        'complex': '–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ'
    };
    return services[service] || service;
}

function getClientIP() {
    // –î–ª—è Netlify - IP –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    return '–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π IP';
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏
window.sendToTelegram = sendToTelegram;