// js/protection.js - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
async function sendToTelegram(formData) {
  console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ—É–Ω–∫—Ü–∏—é:', formData);
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  if (!formData.name || !formData.email || !formData.message) {
    return { success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö' };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –¥–∞–Ω–Ω—ã—Ö
  if (formData.message.length > 1000) {
    return { success: false, error: '–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ' };
  }

  try {
    const response = await fetch('/.netlify/functions/telegram', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(formData)
    });

    console.log('üì® –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
    
    // –¢–∞–π–º–∞—É—Ç 10 —Å–µ–∫—É–Ω–¥
    const timeoutPromise = new Promise((_, reject) => 
      setTimeout(() => reject(new Error('Timeout')), 10000)
    );
    
    const result = await Promise.race([response.json(), timeoutPromise]);
    console.log('üì© –†–µ–∑—É–ª—å—Ç–∞—Ç:', result);
    
    if (response.ok) {
      return { success: true, message: result.message };
    } else {
      return { success: false, error: result.error || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' };
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error);
    return { 
      success: false, 
      error: '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' 
    };
  }
}

window.sendToTelegram = sendToTelegram;