// main.js - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
'use strict';

console.log('‚úÖ main.js –∑–∞–≥—Ä—É–∂–µ–Ω');

// ---------- Rate-Limiter ----------
const rateLimiter = {
  maxAttempts: 3,
  windowMs: 10 * 60 * 1000,
  storageKey: 'formRateLimit',

  getData() {
    const raw = localStorage.getItem(this.storageKey);
    return raw ? JSON.parse(raw) : { attempts: 0, firstAttempt: Date.now() };
  },
  
  setData(data) {
    localStorage.setItem(this.storageKey, JSON.stringify(data));
  },
  
  canSubmit() {
    const data = this.getData();
    const now = Date.now();
    const timePassed = now - data.firstAttempt;

    if (data.attempts >= this.maxAttempts && timePassed < this.windowMs) {
      return {
        canSubmit: false,
        reason: 'rate_limit',
        timeRemaining: this.windowMs - timePassed,
      };
    }
    
    if (timePassed >= this.windowMs) {
      this.setData({ attempts: 0, firstAttempt: now });
    }
    
    return { canSubmit: true };
  },
  
  recordAttempt() {
    const data = this.getData();
    data.attempts += 1;
    if (data.attempts === 1) data.firstAttempt = Date.now();
    this.setData(data);
  },
};

// ---------- ValidationUtils ----------
const ValidationUtils = {
  validateEmail(email) {
    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
  },
  
  validatePhone(phone) {
    return /^\+?\d{6,15}$/.test(phone.replace(/\s|-|\(|\)/g, ''));
  },
  
  validateTimeSpent(ms) {
    const issues = [];
    if (ms < 3000) issues.push('–§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ');
    if (ms > 300000) issues.push('–§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ');
    return issues;
  },
  
  detectSpam(text) {
    const spamWords = ['viagra', 'casino', 'crypto', 'http', 'www', '.ru', '.com'];
    const found = spamWords.filter(w => text.toLowerCase().includes(w));
    return found.length ? [`–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞: ${found.join(', ')}`] : [];
  },
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function showError(msg) {
  const fs = document.getElementById('formStatus');
  if (fs) {
    fs.textContent = msg;
    fs.className = 'form-status error';
    fs.style.display = 'block';
  }
  if (typeof trackRSY === 'function') trackRSY('form_client_error', { message: msg });
}

function showSuccess(msg) {
  const fs = document.getElementById('formStatus');
  if (fs) {
    fs.textContent = msg;
    fs.className = 'form-status success';
    fs.style.display = 'block';
  }
  if (typeof trackRSY === 'function') trackRSY('form_submission_success');
}

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã
function initializeForm() {
  const form = document.getElementById('protectedForm');
  if (!form) {
    console.log('‚ùå –§–æ—Ä–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    return;
  }

  console.log('‚úÖ –§–æ—Ä–º–∞ –Ω–∞–π–¥–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫');

  form.addEventListener('submit', async function (e) {
    e.preventDefault();
    console.log('üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –Ω–∞—á–∞—Ç–∞');
    
    const submitButton = document.getElementById('submitButton');
    const formStatus = document.getElementById('formStatus');
    const rateLimitInfo = document.getElementById('rateLimitInfo');
    
    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—à–∏–±–æ–∫
    document.querySelectorAll('.error-message').forEach(msg => msg.style.display = 'none');
    document.querySelectorAll('.form-input').forEach(input => {
      input.classList.remove('error', 'success');
    });
    
    if (formStatus) formStatus.style.display = 'none';
    if (rateLimitInfo) rateLimitInfo.style.display = 'none';

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
    const rateLimitCheck = rateLimiter.canSubmit();
    if (!rateLimitCheck.canSubmit) {
      if (rateLimitCheck.reason === 'rate_limit' && rateLimitInfo) {
        const minutes = Math.ceil(rateLimitCheck.timeRemaining / 60000);
        rateLimitInfo.innerHTML = `‚è±Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ ${minutes} –º–∏–Ω—É—Ç.`;
        rateLimitInfo.style.display = 'block';
        if (typeof trackRSY === 'function') trackRSY('form_rate_limited');
        return;
      }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
    const formData = new FormData(this);
    const data = Object.fromEntries(formData.entries());
    
    console.log('üìù –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', data);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è honeypot
    if (data.honeypot || data.email_confirm) {
      showError('–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å');
      return;
    }

    // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    const errors = {};
    
    if (!data.name || data.name.length < 2) {
      errors.name = '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞';
    }
    
    if (!data.email || !ValidationUtils.validateEmail(data.email)) {
      errors.email = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å';
    }
    
    if (data.phone && !ValidationUtils.validatePhone(data.phone)) {
      errors.phone = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
    }

    if (!data.service) {
      errors.service = '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —É—Å–ª—É–≥—É';
    }
    
    if (!data.message || data.message.length < 10) {
      errors.message = '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤';
    }
    
    if (data.message.length > 1000) {
      errors.message = '–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤)';
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
    if (Object.keys(errors).length > 0) {
      Object.keys(errors).forEach(field => {
        const errorElement = document.getElementById(field + 'Error');
        const inputElement = this.querySelector(`[name="${field}"]`);
        if (errorElement) {
          errorElement.textContent = errors[field];
          errorElement.style.display = 'block';
        }
        if (inputElement) {
          inputElement.classList.add('error');
        }
      });
      if (typeof trackRSY === 'function') trackRSY('form_validation_failed');
      return;
    }

    // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏
    if (submitButton) {
      submitButton.disabled = true;
      submitButton.classList.add('loading');
    }

    try {
      // –ó–∞–ø–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏
      rateLimiter.recordAttempt();

      // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Telegram...');
      const telegramResult = await sendToTelegram(data);
      
      if (telegramResult.success) {
        showSuccess(telegramResult.message || '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
        this.reset();
        console.log('‚úÖ –§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      } else {
        throw new Error(telegramResult.error || 'Unknown error');
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
      showError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
      if (typeof trackRSY === 'function') trackRSY('form_submission_error');
    } finally {
      if (submitButton) {
        submitButton.disabled = false;
        submitButton.classList.remove('loading');
      }
    }
  });

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º timestamp –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  const timestampField = document.getElementById('timestamp');
  if (timestampField) {
    timestampField.value = Date.now();
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
  console.log('‚úÖ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É');
  initializeForm();
});